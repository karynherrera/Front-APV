{"ast":null,"code":"export var rutValidador = function rutValidador(rut) {\n  if (!rut || rut.trim().length < 3) return false;\n  var rutLimpio = rut.replace(/[^0-9kK-]/g, \"\");\n  if (rutLimpio.length < 3) return false;\n  var split = rutLimpio.split(\"-\");\n  if (split.length !== 2) return false;\n  var num = parseInt(split[0], 10);\n  var dgv = split[1];\n  var dvCalc = calculateDV(num);\n  return dvCalc === dgv;\n};\nexport var calculateDV = function calculateDV(rut) {\n  var cuerpo = \"\".concat(rut); // Calcular Dígito Verificador\n\n  var suma = 0;\n  var multiplo = 2; // Para cada dígito del Cuerpo\n\n  for (var i = 1; i <= cuerpo.length; i++) {\n    // Obtener su Producto con el Múltiplo Correspondiente\n    var index = multiplo * cuerpo.charAt(cuerpo.length - i); // Sumar al Contador General\n\n    suma += index; // Consolidar Múltiplo dentro del rango [2,7]\n\n    if (multiplo < 7) {\n      multiplo += 1;\n    } else {\n      multiplo = 2;\n    }\n  } // Calcular Dígito Verificador en base al Módulo 11\n\n\n  var dvEsperado = 11 - suma % 11;\n  if (dvEsperado === 10) return \"k\";\n  if (dvEsperado === 11) return \"0\";\n  return \"\".concat(dvEsperado);\n};\nexport var formatearRut = function formatearRut(rut) {\n  var formateado = rut;\n  formateado = formateado.replace(/\\./g, \"\").replace(\"-\", \"\");\n\n  if (formateado.match(/^(\\d{2})(\\d{3}){2}(\\w{1})$/)) {\n    formateado = formateado.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\w{1})$/, \"$1.$2.$3-$4\");\n  } else if (formateado.match(/^(\\d)(\\d{3}){2}(\\w{0,1})$/)) {\n    formateado = formateado.replace(/^(\\d)(\\d{3})(\\d{3})(\\w{0,1})$/, \"$1.$2.$3-$4\");\n  } else if (formateado.match(/^(\\d)(\\d{3})(\\d{0,2})$/)) {\n    formateado = formateado.replace(/^(\\d)(\\d{3})(\\d{0,2})$/, \"$1.$2.$3\");\n  } else if (formateado.match(/^(\\d)(\\d{0,2})$/)) {\n    formateado = formateado.replace(/^(\\d)(\\d{0,2})$/, \"$1.$2\");\n  }\n\n  return formateado;\n};","map":{"version":3,"sources":["C:/Users/juanc/source/repos/Front-APV/apv/utils/validationRut.js"],"names":["rutValidador","rut","trim","length","rutLimpio","replace","split","num","parseInt","dgv","dvCalc","calculateDV","cuerpo","suma","multiplo","i","index","charAt","dvEsperado","formatearRut","formateado","match"],"mappings":"AAAA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACjC,MAAI,CAACA,GAAD,IAAQA,GAAG,CAACC,IAAJ,GAAWC,MAAX,GAAoB,CAAhC,EAAmC,OAAO,KAAP;AACnC,MAAMC,SAAS,GAAGH,GAAG,CAACI,OAAJ,CAAY,YAAZ,EAA0B,EAA1B,CAAlB;AAEA,MAAID,SAAS,CAACD,MAAV,GAAmB,CAAvB,EAA0B,OAAO,KAAP;AAE1B,MAAMG,KAAK,GAAGF,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAAd;AACA,MAAIA,KAAK,CAACH,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;AAExB,MAAMI,GAAG,GAAGC,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAApB;AACA,MAAMG,GAAG,GAAGH,KAAK,CAAC,CAAD,CAAjB;AAEA,MAAMI,MAAM,GAAGC,WAAW,CAACJ,GAAD,CAA1B;AACA,SAAOG,MAAM,KAAKD,GAAlB;AACH,CAdM;AAgBP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACV,GAAD,EAAS;AAChC,MAAMW,MAAM,aAAMX,GAAN,CAAZ,CADgC,CAEhC;;AACA,MAAIY,IAAI,GAAG,CAAX;AACA,MAAIC,QAAQ,GAAG,CAAf,CAJgC,CAMhC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,MAAM,CAACT,MAA5B,EAAoCY,CAAC,EAArC,EAAyC;AACrC;AACA,QAAMC,KAAK,GAAGF,QAAQ,GAAGF,MAAM,CAACK,MAAP,CAAcL,MAAM,CAACT,MAAP,GAAgBY,CAA9B,CAAzB,CAFqC,CAIrC;;AACAF,IAAAA,IAAI,IAAIG,KAAR,CALqC,CAOrC;;AACA,QAAIF,QAAQ,GAAG,CAAf,EAAkB;AACdA,MAAAA,QAAQ,IAAI,CAAZ;AACH,KAFD,MAEO;AACHA,MAAAA,QAAQ,GAAG,CAAX;AACH;AACJ,GApB+B,CAsBhC;;;AACA,MAAMI,UAAU,GAAG,KAAML,IAAI,GAAG,EAAhC;AACA,MAAIK,UAAU,KAAK,EAAnB,EAAuB,OAAO,GAAP;AACvB,MAAIA,UAAU,KAAK,EAAnB,EAAuB,OAAO,GAAP;AACvB,mBAAUA,UAAV;AACH,CA3BM;AA6BP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAClB,GAAD,EAAS;AACjC,MAAImB,UAAU,GAAGnB,GAAjB;AACAmB,EAAAA,UAAU,GAAGA,UAAU,CAACf,OAAX,CAAmB,KAAnB,EAA0B,EAA1B,EAA8BA,OAA9B,CAAsC,GAAtC,EAA2C,EAA3C,CAAb;;AAEA,MAAIe,UAAU,CAACC,KAAX,CAAiB,4BAAjB,CAAJ,EAAoD;AAChDD,IAAAA,UAAU,GAAGA,UAAU,CAACf,OAAX,CAAmB,gCAAnB,EAAqD,aAArD,CAAb;AACH,GAFD,MAEO,IAAIe,UAAU,CAACC,KAAX,CAAiB,2BAAjB,CAAJ,EAAmD;AACtDD,IAAAA,UAAU,GAAGA,UAAU,CAACf,OAAX,CAAmB,+BAAnB,EAAoD,aAApD,CAAb;AACH,GAFM,MAEA,IAAIe,UAAU,CAACC,KAAX,CAAiB,wBAAjB,CAAJ,EAAgD;AACnDD,IAAAA,UAAU,GAAGA,UAAU,CAACf,OAAX,CAAmB,wBAAnB,EAA6C,UAA7C,CAAb;AACH,GAFM,MAEA,IAAIe,UAAU,CAACC,KAAX,CAAiB,iBAAjB,CAAJ,EAAyC;AAC5CD,IAAAA,UAAU,GAAGA,UAAU,CAACf,OAAX,CAAmB,iBAAnB,EAAsC,OAAtC,CAAb;AACH;;AAED,SAAOe,UAAP;AACH,CAfM","sourcesContent":["export const rutValidador = (rut) => {\r\n    if (!rut || rut.trim().length < 3) return false;\r\n    const rutLimpio = rut.replace(/[^0-9kK-]/g, \"\");\r\n\r\n    if (rutLimpio.length < 3) return false;\r\n\r\n    const split = rutLimpio.split(\"-\");\r\n    if (split.length !== 2) return false;\r\n\r\n    const num = parseInt(split[0], 10);\r\n    const dgv = split[1];\r\n\r\n    const dvCalc = calculateDV(num);\r\n    return dvCalc === dgv;\r\n};\r\n\r\nexport const calculateDV = (rut) => {\r\n    const cuerpo = `${rut}`;\r\n    // Calcular Dígito Verificador\r\n    let suma = 0;\r\n    let multiplo = 2;\r\n\r\n    // Para cada dígito del Cuerpo\r\n    for (let i = 1; i <= cuerpo.length; i++) {\r\n        // Obtener su Producto con el Múltiplo Correspondiente\r\n        const index = multiplo * cuerpo.charAt(cuerpo.length - i);\r\n\r\n        // Sumar al Contador General\r\n        suma += index;\r\n\r\n        // Consolidar Múltiplo dentro del rango [2,7]\r\n        if (multiplo < 7) {\r\n            multiplo += 1;\r\n        } else {\r\n            multiplo = 2;\r\n        }\r\n    }\r\n\r\n    // Calcular Dígito Verificador en base al Módulo 11\r\n    const dvEsperado = 11 - (suma % 11);\r\n    if (dvEsperado === 10) return \"k\";\r\n    if (dvEsperado === 11) return \"0\";\r\n    return `${dvEsperado}`;\r\n};\r\n\r\nexport const formatearRut = (rut) => {\r\n    let formateado = rut;\r\n    formateado = formateado.replace(/\\./g, \"\").replace(\"-\", \"\");\r\n\r\n    if (formateado.match(/^(\\d{2})(\\d{3}){2}(\\w{1})$/)) {\r\n        formateado = formateado.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\w{1})$/, \"$1.$2.$3-$4\");\r\n    } else if (formateado.match(/^(\\d)(\\d{3}){2}(\\w{0,1})$/)) {\r\n        formateado = formateado.replace(/^(\\d)(\\d{3})(\\d{3})(\\w{0,1})$/, \"$1.$2.$3-$4\");\r\n    } else if (formateado.match(/^(\\d)(\\d{3})(\\d{0,2})$/)) {\r\n        formateado = formateado.replace(/^(\\d)(\\d{3})(\\d{0,2})$/, \"$1.$2.$3\");\r\n    } else if (formateado.match(/^(\\d)(\\d{0,2})$/)) {\r\n        formateado = formateado.replace(/^(\\d)(\\d{0,2})$/, \"$1.$2\");\r\n    }\r\n\r\n    return formateado;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}