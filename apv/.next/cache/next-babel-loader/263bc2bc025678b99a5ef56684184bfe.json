{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\juanc\\\\source\\\\repos\\\\Front-APV\\\\apv\\\\components\\\\WizardComponent.js\";\nimport React, { useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport joven from \"../public/assets/svg/joven.svg\";\nimport joven2 from \"../public/assets/svg/joven2.svg\";\nexport const sleep = ms => new Promise(resolve => setTimeout(resolve, ms)); // Wizard is a single Formik instance whose children are each page of the\n// multi-step form. The form is submitted on each forward transition (can only\n// progress with valid input), whereas a backwards step is allowed with\n// incomplete data. A snapshot of form state is used as initialValues after each\n// transition. Each page has an optional submit handler, and the top-level\n// submit is called when the final page is submitted.\n\nexport const Wizard = ({\n  children,\n  initialValues,\n  onSubmit\n}) => {\n  const {\n    0: stepNumber,\n    1: setStepNumber\n  } = useState(0);\n  const steps = React.Children.toArray(children);\n  const {\n    0: snapshot,\n    1: setSnapshot\n  } = useState(initialValues);\n  const step = steps[stepNumber];\n  const totalSteps = steps.length;\n  const isLastStep = stepNumber === totalSteps - 1;\n\n  const next = values => {\n    setSnapshot(values);\n    setStepNumber(Math.min(stepNumber + 1, totalSteps - 1));\n  };\n\n  const handleSubmit = async (values, bag) => {\n    if (step.props.onSubmit) {\n      await step.props.onSubmit(values, bag);\n    }\n\n    if (isLastStep) {\n      return onSubmit(values, bag);\n    } else {\n      bag.setTouched({});\n      next(values);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-sm-12 col-md-10 bloque form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card formulario\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: snapshot,\n            onSubmit: handleSubmit,\n            validationSchema: step.props.validationSchema,\n            children: formik => /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Step \", stepNumber + 1, \" of \", totalSteps]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 37\n              }, this), step, /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex justify-content-center\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col justify-content-center d-flex\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    id: \"calcular\",\n                    className: \"btn btn-lg btn-block\",\n                    disabled: !(formik.isValid && formik.dirty),\n                    children: stepNumber > 0 ? stepNumber > 1 ? 'Calcular' : 'Continuar' : 'Comenzar'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 61,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-lg-2 \",\n      children: stepNumber > 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: joven2,\n        alt: \"joven modelo 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: joven,\n        alt: \"joven modelo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 78\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\nexport const WizardStep = ({\n  children\n}) => children;","map":{"version":3,"sources":["C:/Users/juanc/source/repos/Front-APV/apv/components/WizardComponent.js"],"names":["React","useState","Form","Formik","joven","joven2","sleep","ms","Promise","resolve","setTimeout","Wizard","children","initialValues","onSubmit","stepNumber","setStepNumber","steps","Children","toArray","snapshot","setSnapshot","step","totalSteps","length","isLastStep","next","values","Math","min","handleSubmit","bag","props","setTouched","validationSchema","formik","isValid","dirty","WizardStep"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Form, Formik} from \"formik\";\r\nimport joven from \"../public/assets/svg/joven.svg\";\r\nimport joven2 from \"../public/assets/svg/joven2.svg\"\r\n\r\nexport const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Wizard is a single Formik instance whose children are each page of the\r\n// multi-step form. The form is submitted on each forward transition (can only\r\n// progress with valid input), whereas a backwards step is allowed with\r\n// incomplete data. A snapshot of form state is used as initialValues after each\r\n// transition. Each page has an optional submit handler, and the top-level\r\n// submit is called when the final page is submitted.\r\nexport const Wizard = ({ children, initialValues, onSubmit }) => {\r\n\r\n\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const steps = React.Children.toArray(children);\r\n    const [snapshot, setSnapshot] = useState(initialValues);\r\n\r\n    const step = steps[stepNumber];\r\n    const totalSteps = steps.length;\r\n    const isLastStep = stepNumber === totalSteps - 1;\r\n\r\n    const next = values => {\r\n        setSnapshot(values);\r\n        setStepNumber(Math.min(stepNumber + 1, totalSteps - 1));\r\n    };\r\n\r\n\r\n    const handleSubmit = async (values, bag) => {\r\n        if (step.props.onSubmit) {\r\n            await step.props.onSubmit(values, bag);\r\n        }\r\n        if (isLastStep) {\r\n            return onSubmit(values, bag);\r\n        } else {\r\n            bag.setTouched({});\r\n            next(values);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-10 bloque form\">\r\n                <div className=\"card formulario\">\r\n                    <div className=\"card-body\">\r\n                        <Formik\r\n                            initialValues={snapshot}\r\n                            onSubmit={handleSubmit}\r\n                            validationSchema={step.props.validationSchema}\r\n                        >\r\n                            {(formik) => (\r\n                                <Form>\r\n                                    <p>\r\n                                        Step {stepNumber + 1} of {totalSteps}\r\n                                    </p>\r\n                                    {step}\r\n                                    <div className=\"d-flex justify-content-center\">\r\n                                        <div className=\"col justify-content-center d-flex\">\r\n                                            <button\r\n                                                type=\"submit\"\r\n                                                id=\"calcular\"\r\n                                                className=\"btn btn-lg btn-block\"\r\n                                                disabled={!(formik.isValid && formik.dirty)}\r\n                                            >\r\n                                                {stepNumber >0 ? (stepNumber > 1 ? 'Calcular': 'Continuar') : 'Comenzar'}\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-lg-2 \">\r\n                {stepNumber > 0 ? <img src={joven2} alt=\"joven modelo 2\"/> : <img src={joven} alt=\"joven modelo\"/>}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const WizardStep = ({ children }) => children;\r\n"]},"metadata":{},"sourceType":"module"}